\"\"\"\nNmap tool for network scanning and host discovery.\n\"\"\"\nimport subprocess\nimport xml.etree.ElementTree as ET\nimport json\n\ndef parse_nmap_xml_output(xml_output: str) -> dict:\n    \"\"\"\n    Parses Nmap XML output into a Python dictionary.\n\n    Args:\n        xml_output: Nmap XML output as a string.\n\n    Returns:\n        A dictionary representing the Nmap scan results.\n        Returns an empty dictionary if parsing fails.\n    \"\"\"\n    try:\n        root = ET.fromstring(xml_output)\n        scan_results = {\"hosts\": []}\n\n        for host_node in root.findall('host'):\n            host_info = {\n                \"status\": host_node.find('status').get('state') if host_node.find('status') is not None else 'unknown',\n                \"addresses\": [],\n                \"hostnames\": [],\n                \"ports\": []\n            }\n\n            for address_node in host_node.findall('address'):\n                host_info[\"addresses\"].append({\n                    \"addr\": address_node.get('addr'),\n                    \"addrtype\": address_node.get('addrtype')\n                })\n\n            hostnames_node = host_node.find('hostnames')\n            if hostnames_node is not None:\n                for hostname_node in hostnames_node.findall('hostname'):\n                    host_info[\"hostnames\"].append({\n                        \"name\": hostname_node.get('name'),\n                        \"type\": hostname_node.get('type')\n                    })\n            \n            ports_node = host_node.find('ports')\n            if ports_node is not None:\n                for port_node in ports_node.findall('port'):\n                    port_info = {\n                        \"protocol\": port_node.get('protocol'),\n                        \"portid\": port_node.get('portid'),\n                        \"state\": port_node.find('state').get('state') if port_node.find('state') is not None else 'unknown',\n                        \"reason\": port_node.find('state').get('reason') if port_node.find('state') is not None else 'unknown',\n                    }\n                    service_node = port_node.find('service')\n                    if service_node is not None:\n                        port_info[\"service\"] = {\n                            \"name\": service_node.get('name'),\n                            \"product\": service_node.get('product'),\n                            \"version\": service_node.get('version'),\n                            \"extrainfo\": service_node.get('extrainfo'),\n                            \"method\": service_node.get('method'),\n                            \"conf\": service_node.get('conf')\n                        }\n                        # Remove None values from service_info\n                        port_info[\"service\"] = {k: v for k, v in port_info[\"service\"].items() if v is not None}\n                    \n                    script_nodes = port_node.findall('script')\n                    if script_nodes:\n                        port_info[\"scripts\"] = []\n                        for script_node in script_nodes:\n                            port_info[\"scripts\"].append({\n                                \"id\": script_node.get('id'),\n                                \"output\": script_node.get('output')\n                            })\n                    host_info[\"ports\"].append(port_info)\n            \n            scan_results[\"hosts\"].append(host_info)\n        \n        # Add runstats like finished time, hosts up/down etc.\n        runstats_node = root.find('runstats')\n        if runstats_node is not None:\n            scan_results['runstats'] = {\n                'finished': runstats_node.find('finished').get('timestr') if runstats_node.find('finished') is not None else None,\n                'elapsed': runstats_node.find('finished').get('elapsed') if runstats_node.find('finished') is not None else None,\n                'summary': runstats_node.find('finished').get('summary') if runstats_node.find('finished') is not None else None,\n                'hosts_up': runstats_node.find('hosts').get('up') if runstats_node.find('hosts') is not None else None,\n                'hosts_down': runstats_node.find('hosts').get('down') if runstats_node.find('hosts') is not None else None,\n                'hosts_total': runstats_node.find('hosts').get('total') if runstats_node.find('hosts') is not None else None,\n            }\n            scan_results['runstats'] = {k: v for k, v in scan_results['runstats'].items() if v is not None}\n\n        return scan_results\n    except ET.ParseError as e:\n        # Consider logging the error\n        print(f\"Error parsing Nmap XML: {e}\")\n        return {\"error\": \"Failed to parse Nmap XML output\", \"details\": str(e)}\n    except Exception as e:\n        print(f\"An unexpected error occurred during Nmap XML parsing: {e}\")\n        return {\"error\": \"An unexpected error occurred during Nmap XML parsing\", \"details\": str(e)}\n\ndef run_nmap_scan(targets: list[str], options: list[str] = None) -> dict:\n    \"\"\"\n    Runs an Nmap scan against the specified targets with given options.\n\n    Args:\n        targets: A list of IP addresses, hostnames, or network ranges.\n        options: A list of Nmap command-line options (e.g., [\"-sV\", \"-p-\"]).\n                 The -oX - option for XML output is added automatically.\n\n    Returns:\n        A dictionary containing the parsed Nmap scan results or an error message.\n    \"\"\"\n    if not targets:\n        return {\"error\": \"No targets specified for Nmap scan.\"}\n\n    command = [\"nmap\"]\n    if options:\n        # Filter out any user-supplied XML output options to avoid conflict\n        options = [opt for opt in options if not opt.startswith(('-oX', '-oA', '-oG', '-oS', '-oN'))]\n        command.extend(options)\n    \n    command.extend(targets)\n    command.append(\"-oX\")  # Output in XML format\n    command.append(\"-\")     # Output to stdout\n\n    try:\n        print(f\"Running Nmap command: {' '.join(command)}\")\n        process = subprocess.run(command, capture_output=True, text=True, check=False)\n\n        if process.returncode != 0:\n            # Nmap might return non-zero for various reasons even with partial success (e.g. host down)\n            # We still try to parse if there's any output.\n            error_message = f\"Nmap process exited with error code {process.returncode}.\"\n            if process.stderr:\n                error_message += f\" Stderr: {process.stderr.strip()}\"\n            if not process.stdout:  # If no stdout, it's a more definite failure\n                return {\"error\": error_message}\n            # If there is stdout, proceed to parse, but include the error in the result\n            parsed_output = parse_nmap_xml_output(process.stdout)\n            if \"error\" not in parsed_output: # if parsing itself didn't error\n                 parsed_output[\"warning\"] = error_message # Add nmap execution error as warning\n            else: # if parsing also errored, combine messages\n                parsed_output[\"details\"] = f\"{parsed_output.get('details', '')}; Nmap execution: {error_message}\"\n            return parsed_output\n\n        if not process.stdout:\n            return {\"error\": \"Nmap produced no output.\"}\n        \n        return parse_nmap_xml_output(process.stdout)\n\n    except FileNotFoundError:\n        return {\"error\": \"Nmap command not found. Please ensure Nmap is installed and in your system PATH.\"}\n    except Exception as e:\n        return {\"error\": f\"An unexpected error occurred while running Nmap: {str(e)}\"}\n\nif __name__ == '__main__':\n    # Example Usage (requires Nmap to be installed and a host to scan)\n    # Replace 'scanme.nmap.org' with a target you are authorized to scan.\n    # For local testing, you can use 'localhost' or an IP on your local network.\n    print(\"Starting Nmap tool example...\")\n    # test_targets = [\"scanme.nmap.org\"]\n    test_targets = [\"localhost\"] # Use localhost for a safe, quick test\n    # test_options = [\"-sV\", \"-T4\", \"-F\"] # Service Version, Aggressive Timing, Fast Scan (top 100 ports)\n    test_options = [\"-T4\", \"-F\"] # Fast Scan on localhost\n    \n    print(f\"Scanning targets: {test_targets} with options: {test_options}\")\n    results = run_nmap_scan(test_targets, test_options)\n    \n    print(\"\\nNmap Scan Results:\")\n    print(json.dumps(results, indent=2))\n\n    # Test with an invalid command to check error handling\n    # print(\"\\nTesting error handling for non-existent target or bad options...\")\n    # error_results = run_nmap_scan([\"nonexistentscan.nmap.org\"], [\"-someinvalidoption\"])\n    # print(json.dumps(error_results, indent=2))\n\n    # Test parsing with sample XML (if you have one)\n    # sample_xml = \"\"\"<nmaprun>...</nmaprun>\"\"\" \n    # if sample_xml.startswith(\"<nmaprun>\"):\n    #     print(\"\\nParsing sample Nmap XML:\")\n    #     parsed_sample = parse_nmap_xml_output(sample_xml)\n    #     print(json.dumps(parsed_sample, indent=2))\n
